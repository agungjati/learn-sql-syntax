[1] SELECT statement is used to select data from a database
    for all columns   : SELECT * FROM Users;
    for apart columns : SELECT FirstName, LastName FROM Users;

[2] SELECT DISTINCT is used to return different values
    SELECT DISTINCT FirstName FROM Users;

[3] WHERE clause filters a records by condition
    SELECT * FROM Users WHERE Age >= 18;

[4] Operators in statement condition
    Operator Name                           Example
    =        equal                          SELECT * FROM Users WHERE FirstName='Anita';
    >        greater than                   SELECT * FROM Users WHERE Age > 10;
    <        less than                      SELECT * FROM Users WHERE Age < 5;
    >=       greater than or equal          SELECT * FROM Users WHERE Age >= 18;
    <=       less than or equal             SELECT * FROM Users WHERE Age <= 10;
    <>       not equal                      SELECT * FROM Users WHERE FirstName <> 'Anisa';
    BETWEEN  between a certain range        SELECT * FROM Users WHERE Age BETWEEN 10 AND 15;
    LIKE     search for a pattern           SELECT * FROM Users WHERE FirstName LIKE '%Anita%';
    IN       like equal but multiple values SELECT * FROM Users WHERE FirstName IN  ('Anita','Anisa');
    AND      for multiple condition which   SELECT * FROM Users WHERE Age <= 10 AND Age > 5;
             is all conditions must be true
    OR       for multiple condition which   SELECT * FROM Users WHERE FirstName='Anita' OR FirstName='Anisa';
             is it will true if any true    
    NOT      not equal                      SELECT * FROM Users WHERE NOT FirstName='Anisa';

[5] ORDER BY keyword is used to sorts data in ascending or descending
    default sorting as ascending : SELECT * FROM Users ORDER BY FirstName;
    sorting as descending        : SELECT * FROM Users ORDER BY FirstName DESC;
    multiple order               : SELECT * FROM Users ORDER BY FirstName ASC, LastName DESC;

[6] TOP, LIMIT, and ROWNUM clause used to retreives apart records 
     In SQL Server/ MS Access, 
        select one record  : SELECT TOP 1 * FROM User;
        select half record : SELECT TOP 50 PERCENT * FROM User;
     In MySQL, SELECT * FROM User LIMIT 1;
     In Oracle, SELECT * FROM User WHERE ROWNUM <= 3;

[7] MIN() and MAX() functions 
     return the smallest value : SELECT MIN(Age) FROM User
     return the largest value  : SELECT MAX(Age) FROM User

[8] Data type date
    Format  : Date, YYYY-MM-DD
              DateTime/ Timestamp, YYYY-MM-DD HH:MI:SS
              YEAR, YYYY or YY
    Example : SELECT * FROM User WHERE BirthDate='1999-02-01'

[9] CREATE VIEW statement like a function in programming you can call it and return result-set of a sql statement
    create view : CREATE VIEW [FirstName LastName] AS
                  SELECT FirstName, LastName FROM User
                  WHERE Age >= 18
    call it frequntly : SELECT * FROM [FirstName LastName]
             
[10] COUNT() function is used to counts how much data in table
     SELECT COUNT(*) FROM User

[11] AVG() function to averages of value columns
     SELECT AVG(Age) FROM User

[12] SUM() function to total sum of value columns
     SELECT SUM(Age) FROM User

[13] LIKE operator is used in WHERE clause to search pattern in a column
     using wildcard percent / % :
     display data by column FirstName that value 'Agung' :  SELECT * FROM User WHERE  FirstName LIKE '%Agung%
     display data by column FirstName that starting word 'A' : SELECT * FROM User WHERE  FirstName LIKE 'A%
     display data by column FirstName that ending word 'g' : SELECT * FROM User WHERE  FirstName LIKE '%g
     using wildcard underscore / _ :
     display data  by column FirstName that have 4 word and have letter 'a' in mid : SELECT * FROM User FirstName LIKE '_a__'

[14] IN operator like operator equal but multiple values
     SELECT * FROM User WHERE FirstName IN ('Agung', 'Handaru')
     SELECT * FROM User WHERE FirstName IN (SELECT LastName FROM User)

[15] BETWEEN operator 
     SELECT * FROM User WHERE Age BETWEEN 10 AND 18
     similiar syntax
     SELECT * FROM User WHERE Age > 10 AND Age < 18

[16] Aliases, to replaces name of column
     SELECT FirstName AS 'Nama Depan' FROM User

[17] INNER JOIN clause is used to returns data that matching in both tables
     SELECT User.FirstName, Transaction.TransactionId, Transaction.SubTotal 
     FROM Transaction
     INNER JOIN User on Transaction.UserId ON User.Id

[18] LEFT JOIN clause is used to select data that matching in both tables and select all data left table (Transaction)
     SELECT User.FirstName, Transaction.TransactionId, Transaction.SubTotal 
     FROM Transaction
     LEFT JOIN User on Transaction.UserId ON User.Id

[19] RIGHT JOIN clause is used to select data that matching in both tables and select all data right table (User)
     SELECT User.FirstName, Transaction.TransactionId, Transaction.SubTotal 
     FROM Transaction
     RIGHT JOIN User on Transaction.UserId ON User.Id
    
[20] FULL OUTER JOIN clause is used to select all data both tables, although any values not matching and will display null value for any columns
     SELECT User.FirstName, Transaction.TransactionId, Transaction.SubTotal 
     FROM Transaction
     FULL OUTER JOIN User on Transaction.UserId ON User.Id

[21] SELF JOIN same as INNER JOIN
     SELECT User.FirstName, Transaction.TransactionId, Transaction.SubTotal 
     FROM Transaction, User
     WHERE Transaction.UserId = User.Id

[22] UNION operator, to combine the result set of two or more select statement, rules of usage :
     numbers of column must same, columns have same data type, and columns must also be in same order
     SELECT Country FROM Customer
     UNION
     SELECT Country FROM Supplier;
     select all, although duplicate values
     SELECT Country FROM Customer
     UNION ALL
     SELECT Country FROM Supplier;

[23] GROUP BY statement is used to groups data that have same value by specific column 
     SELECT * FROM Supplier
     GROUP BY Country;     

[24] HAVING clause was added, because WHERE clause could not be used with aggregate function, it's clause similiar usage as WHERE clause
     SELECT * FROM Supplier
     WHERE FirstName = 'Anisa'
     GROUP BY City
     HAVING Age >= 18;

[25] EXISTS operator returns true if subquery was not returned null
     SELECT * FROM Supplier
     WHERE EXISTS (SELECT * FROM User WHERE User.Id = Supplier.UsrId)

[26] ANY and ALL operators such as EXISTS 
     SELECT FirstName, LastName FROM User
     WHERE Id = ANY (SELECT UserId FROM Transaction WHERE SubTotal >= 100000);
     another example
     SELECT FirstName, LastName FROM User
     WHERE Id = ALL (SELECT UserId FROM Transaction WHERE SubTotal >= 100000);

[27] CASE statement
     SELECT FirstName, LastName,
     CASE
        WHEN Age < 18 THEN "Masih anak - anak"
        WHEN Age >= 18 AND Age <= 30 THEN "Masih dewasa"
        else "Sudah tua"
     END AS Status
     FROM User

[28] STORE PROCEDURE is a prepared code that you can save, so the code can be reused over and over again.
     
